<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="18.11.1.0">
<procedure name="main">
<interface/>
<body>
<l>dev_close_window ()</l>
<l>dev_update_window ('off')</l>
<c></c>
<l>read_image (Image, 'C:/Users/soft/Desktop/tongzhouW332.bmp')</l>
<l>get_image_size (Image, Width, Height)</l>
<c>*窗口显示</c>
<l>dev_open_window_fit_size (0, 0, Width, Height, -1, -1, WindowHandle)</l>
<l>set_display_font (WindowHandle, 14, 'mono', 'true', 'false')</l>
<l>dev_set_draw ('margin')</l>
<l>dev_set_line_width (3)</l>
<l>dev_display (Image)</l>
<l>disp_continue_message (WindowHandle, 'black', 'true')</l>
<l>log_image (Image, LogImage, 'e')</l>
<l>mean_image (LogImage, ImageMean, 9, 9)</l>
<l>threshold (ImageMean, Regions, 0, 3.5318)</l>
<l>boundary (Regions, RegionBorder, 'inner')</l>
<l>dilation_circle (RegionBorder, RegionDilation, 5)</l>
<l>reduce_domain (Image, RegionDilation, ImageReduced)</l>
<c>*提取亚像素边缘</c>
<l>edges_sub_pix (ImageReduced, Edges, 'canny', 1, 10, 40)</l>
<l>segment_contours_xld (Edges, ContoursSplit, 'lines_circles', 5, 4, 2)</l>
<l>dev_clear_window ()</l>
<l>dev_display (ContoursSplit)</l>
<l>count_obj (ContoursSplit, Number)</l>
<l>dev_display (Image)</l>
<c></c>
<l>dev_clear_window ()</l>
<l>dev_display (Image)</l>
<c></c>
<l>NumberCircles := 0</l>
<l>Rows := []</l>
<l>Columns := []</l>
<l>Radii := []</l>
<l>for I := 1 to Number by 1</l>
<l>    select_obj (ContoursSplit, ObjectSelected, I)</l>
<l>    get_contour_global_attrib_xld (ObjectSelected, 'cont_approx', Attrib)</l>
<c>    * Fit a circle to the line segment that are arcs of a circle</c>
<l>    if (Attrib &gt; 0)</l>
<l>        fit_circle_contour_xld (ObjectSelected, 'ahuber', -1, 0, 0, 2, 1.5, Row, Column, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>        if (Radius &gt; 120)</l>
<l>            NumberCircles := NumberCircles + 1</l>
<l>            gen_circle_contour_xld (ContCircle, Row, Column, Radius, 0, rad(360), 'positive', 1.0)</l>
<l>            set_tposition (WindowHandle, 1500+NumberCircles * 100,100)</l>
<l>            write_string (WindowHandle, 'Row:'+Row +'  Col: '+Column)</l>
<l>            Rows[NumberCircles-1] := Row</l>
<l>            Columns[NumberCircles-1] := Column</l>
<l>            Radii[NumberCircles-1] := Radius</l>
<l>            dev_set_color ('red')</l>
<l>            dev_display (ContCircle)</l>
<c>            </c>
<l>        endif</l>
<c></c>
<l>    endif</l>
<l>endfor</l>
<c>*************************绘制坐标轴************************</c>
<c>*圆点坐标</c>
<l>RowCenter := Rows[0] </l>
<l>ColCenter := Columns[0] </l>
<c>*Y轴终点坐标</c>
<l>RowY := Rows[1] </l>
<l>ColY := Columns[1]</l>
<c>*求两原点之间直线的角度</c>
<l>line_position (RowCenter, ColCenter, RowY, ColY, RowMid, ColMid, Length, Phi)</l>
<l>if(Phi &gt;= -rad(45))</l>
<c>    *X轴终点坐标</c>
<l>    RowX := RowY</l>
<l>    ColX := ColY</l>
<c>    *Y轴终点坐标</c>
<l>    RowY :=  RowCenter - Length * cos(Phi)</l>
<l>    ColY := ColCenter - Length * sin(Phi)</l>
<l>    AffinePhi := Phi</l>
<l>endif</l>
<l>if(Phi &lt; -rad(45))</l>
<l>    RowX := RowCenter - Length * cos(Phi)</l>
<l>    ColX := ColCenter - Length * sin(Phi)</l>
<l>    AffinePhi := -rad(Phi)</l>
<l>endif</l>
<l>disp_cross (WindowHandle, RowCenter, ColCenter, 60, rad(Phi))</l>
<l>disp_arrow (WindowHandle, RowCenter, ColCenter, RowY, ColY, 5)</l>
<l>set_tposition (WindowHandle, RowY, ColY)</l>
<l>write_string (WindowHandle, 'Y')</l>
<l>dev_set_color ('blue')</l>
<c>*求两直线间的角度</c>
<l>disp_arrow (WindowHandle, RowCenter, ColCenter, RowX, ColX, 5)</l>
<l>set_tposition (WindowHandle, RowX, ColX)</l>
<l>write_string (WindowHandle, 'X')</l>
<l>stop()</l>
<l>dev_clear_window ()</l>
<l>dev_display (Image)</l>
<c>*******************************仿射变换**************************</c>
<c>*求旋转平移矩阵</c>
<l>vector_angle_to_rigid (RowCenter, ColCenter, AffinePhi, 0, 0, 0, HomMat2D)</l>
<c>*仿射变换</c>
<l>affine_trans_image (Image, ImageAffineTrans, HomMat2D, 'nearest_neighbor', 'true')</l>
<c>*******************************检测焊点圆*************************</c>
<l>fast_threshold (Image, Region, 128, 255, 20)</l>
<l>select_shape (Region, SelectedRegions, 'area', 'and', 34220.2, 71834.9)</l>
<l>connection (SelectedRegions, ConnectedRegions)</l>
<l>boundary (ConnectedRegions, RegionBorder, 'inner')</l>
<l>dilation_circle (RegionBorder, RegionDilation, 3.5)</l>
<l>union1 (RegionDilation, RegionUnion)</l>
<l>reduce_domain (Image, RegionUnion, ImageReduced)</l>
<c>*边缘检测</c>
<l>edges_sub_pix (ImageReduced, Edges, 'canny', 1, 20, 40)</l>
<l>segment_contours_xld (Edges, ContoursSplit, 'lines_circles', 5, 4, 2)</l>
<l>select_contours_xld (ContoursSplit, SelectedContours, 'contour_length', 80, 500, -0.5, 0.5)</l>
<l>union_cocircular_contours_xld (SelectedContours, ObjectUnion, 3.1, 1.0, 0.5, 30, 30, 10, 'true', 2)</l>
<c>*对轮廓进行排序</c>
<l>sort_contours_xld (ObjectUnion, SortedContours, 'upper_left', 'true', 'column')</l>
<c>*计算轮廓个数</c>
<l>count_obj (SortedContours, Number)</l>
<l>dev_display (SortedContours)</l>
<c>*焊点圆的圆心</c>
<l>SolderCenterRow := []</l>
<l>SolderCenterColumn := []</l>
<l>SolderCenterRow1 := []</l>
<l>SolderCenterColumn1 := []</l>
<c>*焊点半径</c>
<l>CenterRadius := []</l>
<c>*最厚厚度</c>
<l>MaxThickness := []</l>
<c>*最小厚度</c>
<l>MinThickness := []</l>
<c>*平均厚度</c>
<l>AverThickness := []</l>
<l>dev_display(Image)</l>
<l>for i := 1 to Number by 1</l>
<l>    select_obj (SortedContours, ObjectSelected, i)</l>
<l>    fit_circle_contour_xld (ObjectSelected, 'algebraic', -1, 2, 0, 5, 2, Row, Column, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>    gen_circle_contour_xld (ContCircle, Row, Column, Radius, 0, rad(360), 'positive', 2)</l>
<l>    dev_set_color ('green')</l>
<l>    dev_display (ContCircle)</l>
<c>    *绘制箭头</c>
<l>    if (i == 1)</l>
<l>        Row2 := Row + Radius * sin(rad(-45))</l>
<l>        Column2 := Column + Radius * cos(rad(-45))</l>
<l>        set_tposition (WindowHandle, Row2 - 35, Column2 + 5)</l>
<l>    endif</l>
<l>    if (i &gt; 1)</l>
<l>        exist := 0</l>
<l>        for j := 0 to i - 2 by 1</l>
<l>            distance_pp (Row, Column, SolderCenterRow[j], SolderCenterColumn[j], DistanceCenters)</l>
<l>            if (DistanceCenters &lt; 20)</l>
<l>                exist := 1</l>
<l>            endif</l>
<l>        endfor</l>
<l>        if (exist == 1)</l>
<l>            Row2 := Row + Radius * sin(rad(-135))</l>
<l>            Column2 := Column + Radius * cos(rad(-135))</l>
<l>            set_tposition (WindowHandle, Row2 - 40, Column2 - 30)</l>
<l>        else</l>
<l>            Row2 := Row + Radius * sin(rad(-45))</l>
<l>            Column2 := Column + Radius * cos(rad(-45))</l>
<l>            set_tposition (WindowHandle, Row2 - 35, Column2 + 5)</l>
<l>        endif</l>
<l>    endif</l>
<l>    disp_arrow (WindowHandle, Row, Column, Row2, Column2, 2)</l>
<l>    write_string (WindowHandle, i)</l>
<l>    if (i%2 == 1)</l>
<l>        disp_message (WindowHandle, 'R' + i + ' = ' + Radius$'.4', 'window', i * 20, 100, 'white', 'false')</l>
<l>    else</l>
<l>        disp_message (WindowHandle, 'R' + i + ' = ' + Radius$'.4', 'window', (i * 20) - 20, 270, 'white', 'false')</l>
<l>    endif</l>
<l>    SolderCenterRow := [SolderCenterRow,Row]</l>
<l>    SolderCenterColumn := [SolderCenterColumn,Column]</l>
<c>    *保存透视变换后的圆心坐标</c>
<l>    affine_trans_point_2d (HomMat2D, Column, Row, Qx, Qy)</l>
<l>    SolderCenterColumn1[i] := Qx</l>
<l>    SolderCenterRow1[i] := Qy</l>
<l>    SolderCenterRadius[i] := Radius</l>
<c>    *最大厚度、最小厚度、平均厚度</c>
<l>    if(i%2 == 0 and i != 0)</l>
<l>        AverThickness[i] := abs(SolderCenterRadius[i] - SolderCenterRadius[i-1]) / 2</l>
<l>        distance_pp (SolderCenterRow1[i], SolderCenterColumn1[i], SolderCenterRow1[i-1], SolderCenterColumn1[i-1], Distance1)</l>
<c>        *大圆半径 - 小圆半径 + 圆心距</c>
<l>        MaxThickness[i] := SolderCenterRadius[i-1] - SolderCenterRadius[i] + Distance1</l>
<l>        MinThickness[i] := MaxThickness[i] - 2 * Distance1</l>
<c>        *大圆半径 - 小圆半径 - 圆心距</c>
<l>        *MinThicknsss[i] := CenterRadius[i-1] - CenterRadius[i] - Distance1</l>
<l>    endif</l>
<c>    *相对坐标点</c>
<l>endfor</l>
<c></c>
<c>****相对坐标点(截距法)*****</c>
<l>*RelRow := []</l>
<l>*RelCol := []</l>
<l>*for i := 0 to Number-1 by 1</l>
<l>*   projection_pl (CenterRow[i], CenterColumn[i], RowCenter, ColCenter, RowX, ColX, RowProj, ColProj)</l>
<l>*    projection_pl (CenterRow[i], CenterColumn[i], RowCenter, ColCenter, RowY, ColY, RowProj1, ColProj1)</l>
<l>*    distance_pp (RowCenter, ColCenter, RowProj, ColProj, Distance)</l>
<l>*    distance_pp (Row, Column, RowProj1, ColProj1, Distance1)</l>
<l>*    RelCol[i] := Distance</l>
<l>*    RelaRow[i] := Distance1</l>
<l>*    disp_line (WindowHandle, RowCenter, ColCenter, CenterRow[i], CenterColumn[i])</l>
<l>*endfor</l>
<c>**************************重新绘制坐标轴*********************</c>
<l>dev_set_color ('red')</l>
<l>disp_cross (WindowHandle, RowCenter, ColCenter, 60, rad(Phi))</l>
<l>disp_arrow (WindowHandle, RowCenter, ColCenter, RowY, ColY, 5)</l>
<l>set_tposition (WindowHandle, RowY, ColY)</l>
<l>write_string (WindowHandle, 'Y')</l>
<l>dev_set_color ('blue')</l>
<l>disp_arrow (WindowHandle, RowCenter, ColCenter, RowX, ColX, 5)</l>
<l>set_tposition (WindowHandle, RowX, ColX)</l>
<l>write_string (WindowHandle, 'X')</l>
<l>stop()</l>
<c>*******************************划痕检测*************************</c>
<l>dev_clear_window ()</l>
<l>dev_close_window ()</l>
<l>dev_open_window_fit_size (0, 0, Width, Height, -1, -1, WindowHandle1)</l>
<l>set_display_font (WindowHandle1, 14, 'mono', 'true', 'false')</l>
<l>dev_set_line_width (3)</l>
<l>dev_display (Image)</l>
<l>threshold (Image, Regions, 32, 255)</l>
<l>connection (Regions, ConnectedRegions)</l>
<l>select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 2.894e+006, 4.89212e+006)</l>
<l>erosion_rectangle1 (SelectedRegions, RegionErosion, 20, 20)</l>
<l>shape_trans (RegionErosion, RegionTrans, 'convex')</l>
<c>*缩放区域</c>
<l>area_center (RegionTrans, Area, Row, Column)</l>
<l>zoom_region (RegionTrans, RegionZoom, 0.97, 0.97)</l>
<l>area_center (RegionZoom, Area1, Row1, Column1)</l>
<c>*防止缩放区域位移</c>
<l>move_region (RegionZoom, RegionMoved, Row - Row1, Column - Column1)</l>
<c>*分割区域</c>
<l>gen_circle (Circle, Rows[0], Columns[0], Radii[0]+5)</l>
<l>gen_circle (Circle1, Rows[1], Columns[1], Radii[1]+5)</l>
<l>paint_region (Circle1, Image, ImageResult, 0, 'fill')</l>
<l>paint_region (Circle, ImageResult, ImageResult1, 0, 'fill')</l>
<l>paint_region (RegionUnion, ImageResult1, ImageResult2, 0, 'fill')</l>
<l>reduce_domain (ImageResult1, RegionMoved, ImageReduced)</l>
<l>fill_up (Region, RegionFillUp)</l>
<l>dilation_circle (RegionFillUp, RegionDilation1, 15)</l>
<l>paint_region (RegionDilation1, ImageReduced, ImageResult3, 0, 'fill')</l>
<c>*差分</c>
<l>mean_image (ImageResult3, ImageMean, 5, 5)</l>
<l>abs_diff_image (ImageMean, ImageResult3, ImageAbsDiff, 1)</l>
<l>gauss_filter (ImageAbsDiff, ImageGauss, 3)</l>
<l>threshold (ImageGauss, Regions1, 3, 30)</l>
<l>connection (Regions1, ConnectedRegions1)</l>
<l>select_shape (ConnectedRegions1, SelectedRegions1, ['area','circularity'], 'and', [0,0], [1148.57,1])</l>
<l>union1 (SelectedRegions1, RegionUnion2)</l>
<l>erosion_circle (RegionUnion2, RegionErosion1, 1)</l>
<l>dilation_circle (RegionErosion1, RegionDilation2, 10)</l>
<l>dilation_rectangle1 (RegionDilation2, RegionDilation3, 5,5)</l>
<l>connection (RegionDilation3, ConnectedRegions2)</l>
<l>select_shape (ConnectedRegions2, SelectedRegions2, 'area', 'and', 2245.26, 6356.64)</l>
<l>shape_trans (SelectedRegions2, RegionTrans1, 'rectangle2')</l>
<c>*划痕长度</c>
<l>union1 (SelectedRegions2, RegionUnion1)</l>
<l>reduce_domain (ImageGauss, RegionUnion1, ImageReduced1)</l>
<l>scale_image (ImageReduced1, ImageScaled, 36.4286, 0)</l>
<l>threshold (ImageScaled, Regions2, 74, 255)</l>
<l>closing_circle (Regions2, RegionClosing, 13.5)</l>
<l>skeleton (RegionClosing, Skeleton)</l>
<l>gen_contours_skeleton_xld (Skeleton, Contours, 1, 'filter')</l>
<l>union_cotangential_contours_xld (Contours, UnionContours, 0, 100, rad(90), 80, 80, 5, 'attr_forget')</l>
<l>union_adjacent_contours_xld (UnionContours, UnionContours1, 100, 3, 'attr_keep')</l>
<l>select_contours_xld (UnionContours1, SelectedContours1, 'contour_length', 0.5, 200, -0.5, 0.5)</l>
<c>*获取划痕中心点和长度</c>
<l>count_obj (SelectedContours1, Number1)</l>
<l>area_center_xld (SelectedContours1, Area2, Row3, Column3, PointOrder1)</l>
<l>length_xld (SelectedContours1, Length1)</l>
<l>dev_clear_window ()</l>
<l>dev_set_color('yellow')</l>
<l>dev_display (Image)</l>
<l>dev_display(RegionTrans1)</l>
<l>for i := 0 to Number1-1 by 1</l>
<l>    disp_message (WindowHandle1, 'Length:' + Length1[i], 'image', Row3[i]+40, Column3[i], 'black', 'true')</l>
<l>endfor</l>
<l>stop()</l>
<c>*边缘检测</c>
<l>*edges_sub_pix (ImageReduced1, Edges1, 'sobel_fast', 1, 5, 10)</l>
<c>*连接断线和曲线</c>
<l>*union_cotangential_contours_xld (Edges1, UnionContours, 0, 1, rad(180), 100, 100, 2, 'attr_forget')</l>
<l>*union_adjacent_contours_xld (Edges1, UnionContours, 30, 2, 'attr_keep')</l>
<c></c>
<c>**************************重新绘制坐标轴*********************</c>
<l>dev_set_color ('red')</l>
<l>disp_cross (WindowHandle1, RowCenter, ColCenter, 60, rad(Phi))</l>
<l>disp_arrow (WindowHandle1, RowCenter, ColCenter, RowY, ColY, 5)</l>
<l>set_tposition (WindowHandle1, RowY, ColY)</l>
<l>write_string (WindowHandle1, 'Y')</l>
<l>dev_set_color ('blue')</l>
<l>disp_arrow (WindowHandle1, RowCenter, ColCenter, RowX, ColX, 5)</l>
<l>set_tposition (WindowHandle1, RowX, ColX)</l>
<l>write_string (WindowHandle1, 'X')</l>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
